#ifdef DEBUG
  #ifndef __SUNPRO_C
    #include <cfenv>
    #include <cstdlib>
  #endif
#endif
    #include <math.h>
    #include <time.h>
    #include <limits>
    #include <admodel.h>
    #include "TCSAM.hpp"
    #ifdef PRINT2B1
        #undef PRINT2B1
    #endif
    #define PRINT2B1(o) std::cout<<(o)<<std::endl; rpt::echo<<(o)<<std::endl;
    #ifdef PRINT2B2
        #undef PRINT2B2
    #endif
    #define PRINT2B2(t,o) std::cout<<(t)<<(o)<<std::endl; rpt::echo<<(t)<<(o)<<std::endl;
    adstring model  = tcsam::MODEL;
    adstring modVer = tcsam::VERSION; 
    
    time_t start,finish;
    
    //model objects
    ModelConfiguration*  ptrMC; //ptr to model configuration object
    ModelParametersInfo* ptrMPI;//ptr to model parameters info object
    ModelOptions*        ptrMOs;//ptr to model options object
    ModelDatasets*       ptrMDS;//ptr to model datasets object
    ModelDatasets*       ptrSimMDS;//ptr to simulated model datasets object
    OFLResults*          ptrOFLResults;//ptr to OFL results object for MCMC calculations
    
    //MSE objects
    MSE_OpModInfo* ptrOMI=0; //ptr to MSE OpModInfo object
    
    //population dynamics objects
    int runAlt = 0;
    PopDyInfo*    pPDI=0;//  population dynamics info
    CatchInfo*    pCDI=0;//  catch info
    PopProjector* pPPr=0;//  population projector
          
    //dimensions for R output
    adstring yDms;
    adstring xDms;
    adstring mDms;
    adstring sDms;
    adstring fDms;
    adstring vDms;
    adstring ypDms;
    adstring zbDms;
    adstring zpDms;
    adstring zcDms;
    
    //file streams and filenames
    long ctrMCMC = 0;    //counter for mcmc output
    std::ofstream mcmc;  //stream for mcmc output
    
    //filenames
    adstring fnMCMC = "tcsam02.MCMC.R";
    adstring fnConfigFile;//configuration file
    adstring fnPin;       //pin file
    
    //runtime flags (0=false)
    int jitter     = 0;//use jittering for initial parameter values
    int resample   = 0;//use resampling for initial parameter values
    int mcevalOn   = 0;//flag indicating model is being run in mceval phase
    int mseMode    = 0;//flag indicating model is being run in an MSE
    int mseOpModMode  = 0;//flag indicating model is being run in an MSE in operating model mode
    int mseEstModMode = 0;//flag indicating model is being run in an MSE in estimation model mode 
    int usePin     = 0;//flag to initialize parameter values using a pin file
    int doRetro    = 0;//flag to facilitate a retrospective model run
    int fitSimData = 0;//flag to fit model to simulated data calculated in the PRELIMINARY_CALCs section
    int doOFL      = 0;///<flag (0/1) to do OFL calculations
    int doTAC      = 0;///<calculate TAC using harvest control rule indicated by value of doTAC
    int doDynB0    = 0;//flag to run dynamic B0 calculations after final phase
        
    int yRetro = 0; //number of years to decrement for retrospective model run
    int iSeed = -1; //default random number generator seed
    random_number_generator rng(iSeed);//random number generator
    int iSimDataSeed = 0;
    random_number_generator rngSimData(-1);//random number generator for data simulation
    
    //debug flags
    int debugModelConfig     = 0;
    int debugModelDatasets   = 0;
    int debugModelParamsInfo = 0;
    int debugModelParams     = 0;
    int debugModelOptions    = 0;
    
    int debugDATA_SECTION    = 0;
    int debugPARAMS_SECTION  = 0;
    int debugPRELIM_CALCS    = 0;
    int debugPROC_SECTION    = 0;
    int debugREPORT_SECTION  = 0;
    
    int ctrDebugParams = 0;//PROCEDURE_SECTION call counter value to start debugging output
    
    int showActiveParams = 0;    
    int debugRunModel    = 0;    
    int debugObjFun      = 0;
    int debugOFL         = 0;
    int debugMCMC        = 0;
    
    //note: consider using std::bitset to implement debug functionality
    int dbgCalcProcs = 10;
    int dbgObjFun = 20;
    int dbgNLLs   = 25;
    int dbgPriors = tcsam::dbgPriors;
    int dbgPopDy  = 70;
    int dbgApply  = 80;
    int dbgDevs   = 90;
    int dbgAll    = tcsam::dbgAll;
    
    int phsItsRewgt  = 1000;//min phase to calculate effective weights for size comps
    int maxItsRewgt = 0;    //maximum number of terations for re-weighting
    int numItsRewgt = 0;    //number of re-weighting iterations completed
        
    int nSXs    = tcsam::nSXs;
    int MALE    = tcsam::MALE;
    int FEMALE  = tcsam::FEMALE;
    int ALL_SXs = tcsam::ALL_SXs;
    
    int nMSs     = tcsam::nMSs;
    int IMMATURE = tcsam::IMMATURE;
    int MATURE   = tcsam::MATURE;
    int ALL_MSs  = tcsam::ALL_MSs;
    
    int nSCs      = tcsam::nSCs;
    int NEW_SHELL = tcsam::NEW_SHELL;
    int OLD_SHELL = tcsam::OLD_SHELL;
    int ALL_SCs   = tcsam::ALL_SCs;
    
    double smlVal = 0.00001;//small value to keep things > 0
        
